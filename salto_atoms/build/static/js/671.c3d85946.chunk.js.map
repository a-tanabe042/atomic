{"version":3,"file":"static/js/671.c3d85946.chunk.js","mappings":"0MAwJA,QAtJA,WACE,MAAMA,EAAUC,gCACTC,EAASC,IAAcC,EAAAA,EAAAA,WAAS,IAChCC,EAAOC,IAAYF,EAAAA,EAAAA,UAAS,KAEnCG,EAAAA,EAAAA,YAAU,KACYC,WAClBL,GAAW,GACX,MAAMM,EAAU,IAAIC,gBAAgBC,OAAOC,SAASC,QAAQC,IAC1D,YAEIC,EAAc,IAAIL,gBAAgBC,OAAOC,SAASC,QAAQC,IAC9D,gBAMF,GAHAE,QAAQC,IAAI,WAAYR,GACxBO,QAAQC,IAAI,eAAgBF,GAExBN,GAAWM,EAAa,CAC1BG,aAAaC,QAAQ,WAAYV,GACjCS,aAAaC,QAAQ,eAAgBJ,GAErC,UACQK,EAAmBL,GACzBJ,OAAOC,SAASS,KAAO,cACzB,CAAE,MAAOC,GACPhB,EAAS,0GACTK,OAAOC,SAASS,KAAO,QACzB,CACF,MACEf,EAAS,kFACTK,OAAOC,SAASS,KAAO,SAGzBlB,GAAW,EAAM,EAGnBoB,EAAa,GACZ,IAEH,MAAMH,EAAqBZ,UACzB,IACE,MAAMgB,QAAiBC,MACrB,gDACA,CACEC,QAAS,CACPC,cAAc,UAADC,OAAYb,MAK/B,IAAIS,EAASK,GAKX,MAAM,IAAIC,MAAM,kCALD,CACf,MAAMC,QAAgBP,EAASQ,OAC/BhB,QAAQC,IAAI,kBAAmBc,SACzBE,EAAYF,EACpB,CAGF,CAAE,MAAO1B,GACPW,QAAQX,MAAM,iCAAkCA,EAClD,GAGI4B,EAAczB,UAClB,IAEE,MAAM0B,QAA6BT,MAAM,GAADG,OACnC5B,EAAO,+BAAA4B,OAA8BG,EAAQI,KAElD,IAAKD,EAAqBL,GACxB,MAAM,IAAIC,MAAM,kCAElB,MAAMM,QAAyBF,EAAqBF,OAGpD,GAAII,GAAoBA,EAAiBC,OAAS,EAAG,CACnD,MAAMC,EAASF,EAAiB,GAAGD,GAC7BI,QAAuBd,MAAM,GAADG,OAC7B5B,EAAO,qBAAA4B,OAAoBU,GAC9B,CACEE,OAAQ,MACRd,QAAS,CACP,eAAgB,oBAElBe,KAAMC,KAAKC,UAAU,CACnBC,KAAM,CACJC,MAAOd,EAAQc,MACfC,eAAgBf,EAAQe,eAAeC,WACvCC,QAASjB,EAAQiB,QACjBC,GAAIlB,EAAQkB,QAMpB,IAAKV,EAAeV,GAAI,CACtB,MAAMqB,QAAkBX,EAAeP,OAEvC,MADAhB,QAAQX,MAAM,oCAAqC6C,GAC7C,IAAIpB,MAAM,qCAClB,CACF,MAEE,IACE,MAAMN,QAAiBC,MAAM,GAADG,OACvB5B,EAAO,oBACV,CACEwC,OAAQ,OACRd,QAAS,CACP,eAAgB,oBAElBe,KAAMC,KAAKC,UAAU,CACnBC,KAAM,CACJO,UAAWpB,EAAQI,GACnBU,MAAOd,EAAQc,MACfC,eAAgBf,EAAQe,eAAeC,WACvCC,QAASjB,EAAQiB,QACjBC,GAAIlB,EAAQkB,QAMpB,IAAKzB,EAASK,GAAI,CAChB,MAAMqB,QAAkB1B,EAASQ,OAEjC,MADAhB,QAAQX,MAAM,kCAAmC6C,GAC3C,IAAIpB,MAAM,mCAClB,CAEA,MAAMc,QAAapB,EAASQ,OAC5BhB,QAAQC,IAAI,2BAA4B2B,EAC1C,CAAE,MAAOvC,GACPW,QAAQX,MAAM,kCAAmCA,EACnD,CAEJ,CAAE,MAAOA,GACPW,QAAQX,MAAM,oCAAqCA,EACrD,GAGF,OAAIH,GACKkD,EAAAA,EAAAA,KAAA,OAAAC,SAAK,eAGVhD,GACKiD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,CAAK,UAAQhD,MAGf+C,EAAAA,EAAAA,KAAA,OAAAC,SAAK,cACd,C","sources":["OAuthCallBack.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nfunction OAuthCallback() {\n  const apiHost = process.env.REACT_APP_API_HOST;\n  const [loading, setLoading] = useState(true); // ローディング状態\n  const [error, setError] = useState(\"\"); // エラーメッセージ\n\n  useEffect(() => {\n    const handleLogin = async () => {\n      setLoading(true);\n      const idToken = new URLSearchParams(window.location.search).get(\n        \"id_token\"\n      );\n      const accessToken = new URLSearchParams(window.location.search).get(\n        \"access_token\"\n      );\n\n      console.log(\"idToken:\", idToken);\n      console.log(\"accessToken:\", accessToken);\n\n      if (idToken && accessToken) {\n        localStorage.setItem(\"id_token\", idToken);\n        localStorage.setItem(\"access_token\", accessToken);\n\n        try {\n          await fetchGoogleProfile(accessToken);\n          window.location.href = \"/app/welcome\";\n        } catch (err) {\n          setError(\"プロフィールの取得に失敗しました。\");\n          window.location.href = \"/login\";\n        }\n      } else {\n        setError(\"認証情報が不足しています。\");\n        window.location.href = \"/login\";\n      }\n\n      setLoading(false);\n    };\n\n    handleLogin();\n  }, []);\n\n  const fetchGoogleProfile = async (accessToken) => {\n    try {\n      const response = await fetch(\n        \"https://www.googleapis.com/oauth2/v2/userinfo\",\n        {\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n          },\n        }\n      );\n\n      if (response.ok) {\n        const profile = await response.json();\n        console.log(\"Google Profile:\", profile);\n        await saveProfile(profile);\n      } else {\n        throw new Error(\"Failed to fetch Google profile\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching Google profile:\", error);\n    }\n  };\n\n  const saveProfile = async (profile) => {\n    try {\n      // 1. ユーザーの存在チェック\n      const existingUserResponse = await fetch(\n        `${apiHost}/api/user-saltos?google_id=${profile.id}`\n      );\n      if (!existingUserResponse.ok) {\n        throw new Error(\"Failed to check if user exists\");\n      }\n      const existingUserData = await existingUserResponse.json();\n\n      // 2. プロフィール情報の更新（ユーザーが存在する場合）\n      if (existingUserData && existingUserData.length > 0) {\n        const userId = existingUserData[0].id;\n        const updateResponse = await fetch(\n          `${apiHost}/api/user-saltos/${userId}`,\n          {\n            method: \"PUT\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n              data: {\n                email: profile.email,\n                verified_email: profile.verified_email.toString(),\n                picture: profile.picture,\n                hd: profile.hd,\n              },\n            }),\n          }\n        );\n\n        if (!updateResponse.ok) {\n          const errorData = await updateResponse.json();\n          console.error(\"Error updating profile in Strapi:\", errorData);\n          throw new Error(\"Failed to update profile in Strapi\");\n        }\n      } else {\n        // 3. 新しいユーザーの場合の処理\n        try {\n          const response = await fetch(\n            `${apiHost}/api/user-saltos`,\n            {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n              },\n              body: JSON.stringify({\n                data: {\n                  google_id: profile.id,\n                  email: profile.email,\n                  verified_email: profile.verified_email.toString(),\n                  picture: profile.picture,\n                  hd: profile.hd,\n                },\n              }),\n            }\n          );\n\n          if (!response.ok) {\n            const errorData = await response.json();\n            console.error(\"Error saving profile to Strapi:\", errorData);\n            throw new Error(\"Failed to save profile to Strapi\");\n          }\n\n          const data = await response.json();\n          console.log(\"Profile saved to Strapi:\", data);\n        } catch (error) {\n          console.error(\"Error saving profile to Strapi:\", error);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error handling profile in Strapi:\", error);\n    }\n  };\n\n  if (loading) {\n    return <div>Loading...</div>; // ローディング表示\n  }\n\n  if (error) {\n    return <div>Error: {error}</div>; // エラー表示\n  }\n\n  return <div>Loading...</div>;\n}\n\nexport default OAuthCallback;\n"],"names":["apiHost","process","loading","setLoading","useState","error","setError","useEffect","async","idToken","URLSearchParams","window","location","search","get","accessToken","console","log","localStorage","setItem","fetchGoogleProfile","href","err","handleLogin","response","fetch","headers","Authorization","concat","ok","Error","profile","json","saveProfile","existingUserResponse","id","existingUserData","length","userId","updateResponse","method","body","JSON","stringify","data","email","verified_email","toString","picture","hd","errorData","google_id","_jsx","children","_jsxs"],"sourceRoot":""}