{"version":3,"file":"static/js/678.c01b46c6.chunk.js","mappings":"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","sources":["components/Cards/TitleCard.js","components/Typography/Subtitle.js","features/charts/components/LineChart.js","features/charts/components/BarChart.js","features/charts/components/GoalsChart.js","features/charts/components/SkillsChart.js","features/charts/components/ScatterChart.js","features/charts/components/StackBarChart.js","features/charts/components/SkillsChannels.js","features/charts/components/GoalsChannels.js","features/charts/components/DashboardStats.js","features/charts/index.js","pages/protected/Charts.js"],"sourcesContent":["import Subtitle from \"../Typography/Subtitle\"\n\n  \n  function TitleCard({title, children, topMargin, TopSideButtons}){\n      return(\n          <div className={\"card w-full p-6 bg-base-100 shadow-xl \" + (topMargin || \"mt-6\")}>\n\n            {/* Title for Card */}\n              <Subtitle styleClass={TopSideButtons ? \"inline-block\" : \"\"}>\n                {title}\n\n                {/* Top side button, show only if present */}\n                {\n                    TopSideButtons && <div className=\"inline-block float-right\">{TopSideButtons}</div>\n                }\n              </Subtitle>\n              \n              <div className=\"divider mt-2\"></div>\n          \n              {/** Card Body */}\n              <div className='h-full w-full pb-6 bg-base-100'>\n                  {children}\n              </div>\n          </div>\n          \n      )\n  }\n  \n  \n  export default TitleCard"," function Subtitle({styleClass, children}){\n    return(\n        <div className={`text-xl font-semibold ${styleClass}`}>{children}</div>\n    )\n}\n\nexport default Subtitle","import {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Filler,\n  Legend,\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport TitleCard from '../../../components/Cards/TitleCard';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Filler,\n  Legend\n);\n\nfunction LineChart(){\n\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n    },\n  };\n\n  \n  const labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July'];\n\n  const data = {\n  labels,\n  datasets: [\n    {\n      fill: true,\n      label: 'MAU',\n      data: labels.map(() => { return Math.random() * 100 + 500 }),\n      borderColor: 'rgb(53, 162, 235)',\n      backgroundColor: 'rgba(53, 162, 235, 0.5)',\n    },\n  ],\n};\n  \n\n    return(\n      <TitleCard title={\"Montly Active Users (in k)\"} >\n          <Line data={data} options={options}/>\n      </TitleCard>\n    )\n}\n\n\nexport default LineChart","import {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\nimport TitleCard from '../../../components/Cards/TitleCard';\n\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\n\nfunction BarChart(){\n\n    const options = {\n        responsive: true,\n        plugins: {\n          legend: {\n            position: 'top',\n          }\n        },\n      };\n      \n      const labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July'];\n      \n      const data = {\n        labels,\n        datasets: [\n          {\n            label: 'Store 1',\n            data: labels.map(() => { return Math.random() * 1000 + 500 }),\n            backgroundColor: 'rgba(255, 99, 132, 1)',\n          },\n          {\n            label: 'Store 2',\n            data: labels.map(() => { return Math.random() * 1000 + 500 }),\n            backgroundColor: 'rgba(53, 162, 235, 1)',\n          },\n        ],\n      };\n\n    return(\n      <TitleCard title={\"No of Orders\"} topMargin=\"mt-2\">\n            <Bar options={options} data={data} />\n      </TitleCard>\n\n    )\n}\n\n\nexport default BarChart","import React, { useState, useEffect } from \"react\";\nimport {\n  Chart as ChartJS,\n  ArcElement,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { Doughnut } from 'react-chartjs-2';\nimport TitleCard from '../../../components/Cards/TitleCard';\nimport useStrapi from \"../../../hooks/useStrapi\";\n\nChartJS.register(ArcElement, Tooltip, Legend);\n\nfunction generateRandomColor() {\n  // Set a minimum value for each color component to ensure brightness\n  const minVal = 100; // Adjust this value to control the brightness\n  const r = Math.floor(Math.random() * (255 - minVal) + minVal);\n  const g = Math.floor(Math.random() * (255 - minVal) + minVal);\n  const b = Math.floor(Math.random() * (255 - minVal) + minVal);\n  return `rgba(${r}, ${g}, ${b}, 0.8)`;\n}\n\n\nfunction GoalsChart() {\n  const { data: membersData, loading: membersLoading } = useStrapi(\"user-saltos\", {});\n  const [chartData, setChartData] = useState();\n\n  useEffect(() => {\n    if (membersLoading || !membersData || !membersData.data) return;\n\n    let goalMap = {};\n    membersData.data.forEach(user => {\n      if (user && user.attributes && user.attributes.goals) {\n        user.attributes.goals.forEach(goal => {\n          if (goal) {\n            goalMap[goal] = (goalMap[goal] || 0) + 1;\n          }\n        });\n      }\n    });\n\n    // 固定色の配列\n    const fixedColors = [\n      'rgba(255, 99, 132, 0.8)', // 赤\n      'rgba(54, 162, 235, 0.8)', // 青\n      'rgba(255, 206, 86, 0.8)', // 黄色\n      'rgba(75, 192, 192, 0.8)', // 緑\n      'rgba(153, 102, 255, 0.8)'  // 紫\n    ];\n\n    // 数が1の項目を別に管理\n    let singleCountGoals = [];\n    let otherGoalsCount = 0;\n    for (const [goal, count] of Object.entries(goalMap)) {\n      if (count === 0) {\n        singleCountGoals.push(goal);\n        otherGoalsCount += 1;\n      }\n    }\n\n    // 数が1の項目を除外\n    singleCountGoals.forEach(goal => {\n      delete goalMap[goal];\n    });\n\n    // ソートと色の設定\n    const sortedGoals = Object.entries(goalMap).sort((a, b) => b[1] - a[1]);\n    const goalLabels = sortedGoals.map(item => item[0]);\n    const goalValues = sortedGoals.map(item => item[1]);\n\n    // その他の項目を追加\n    if (otherGoalsCount > 0) {\n      goalLabels.push(\"Others\");\n      goalValues.push(otherGoalsCount);\n    }\n\n    const backgroundColors = goalLabels.map((label, index) => \n      index < 5 ? fixedColors[index % fixedColors.length] : generateRandomColor()\n    );\n\n    setChartData({\n      labels: goalLabels,\n      datasets: [\n        {\n          label: '# of Goals',\n          data: goalValues,\n          backgroundColor: backgroundColors,\n          borderColor: backgroundColors.map(color => color.replace('0.8', '1')),\n          borderWidth: 1,\n        }\n      ],\n    });\n  }, [membersData, membersLoading]);\n\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n    },\n  };\n\n  if (membersLoading) {\n    return <div>Loading...</div>;\n  }\n\n  if (!membersData || !membersData.data) {\n    return <div>No data available</div>;\n  }\n\n  return (\n    <TitleCard title={\"Goals by Category\"}>\n      {chartData && <Doughnut options={options} data={chartData} />}\n    </TitleCard>\n  );\n}\n\nexport default GoalsChart;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Chart as ChartJS,\n  ArcElement,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { Doughnut } from 'react-chartjs-2';\nimport TitleCard from '../../../components/Cards/TitleCard';\nimport useStrapi from \"../../../hooks/useStrapi\";\n\nChartJS.register(ArcElement, Tooltip, Legend);\n\nfunction generateRandomColor() {\n  // Set a minimum value for each color component to ensure brightness\n  const minVal = 100; // Adjust this value to control the brightness\n  const r = Math.floor(Math.random() * (255 - minVal) + minVal);\n  const g = Math.floor(Math.random() * (255 - minVal) + minVal);\n  const b = Math.floor(Math.random() * (255 - minVal) + minVal);\n  return `rgba(${r}, ${g}, ${b}, 0.8)`;\n}\n\n\nfunction SkillsChart() {\n  const { data: membersData, loading: membersLoading } = useStrapi(\"user-saltos\", {});\n  const [chartData, setChartData] = useState();\n\n  useEffect(() => {\n    if (membersLoading || !membersData || !membersData.data) return;\n\n    let skillMap = {};\n    membersData.data.forEach(user => {\n      if (user && user.attributes && user.attributes.skills) {\n        user.attributes.skills.forEach(skill => {\n          if (skill) {\n            skillMap[skill] = (skillMap[skill] || 0) + 1;\n          }\n        });\n      }\n    });\n\n    // 固定色の配列\n    const fixedColors = [\n      'rgba(255, 99, 132, 0.8)', // 赤\n      'rgba(54, 162, 235, 0.8)', // 青\n      'rgba(255, 206, 86, 0.8)', // 黄色\n      'rgba(75, 192, 192, 0.8)', // 緑\n      'rgba(153, 102, 255, 0.8)'  // 紫\n    ];\n\n    // 数が1の項目を別に管理\n    let singleCountskills = [];\n    let otherskillsCount = 0;\n    for (const [skill, count] of Object.entries(skillMap)) {\n      if (count === 0) {\n        singleCountskills.push(skill);\n        otherskillsCount += 1;\n      }\n    }\n\n    // 数が1の項目を除外\n    singleCountskills.forEach(skill => {\n      delete skillMap[skill];\n    });\n\n    // ソートと色の設定\n    const sortedskills = Object.entries(skillMap).sort((a, b) => b[1] - a[1]);\n    const skillLabels = sortedskills.map(item => item[0]);\n    const skillValues = sortedskills.map(item => item[1]);\n\n    // その他の項目を追加\n    if (otherskillsCount > 0) {\n      skillLabels.push(\"Others\");\n      skillValues.push(otherskillsCount);\n    }\n\n    const backgroundColors = skillLabels.map((label, index) => \n      index < 5 ? fixedColors[index % fixedColors.length] : generateRandomColor()\n    );\n\n    setChartData({\n      labels: skillLabels,\n      datasets: [\n        {\n          label: '# of skills',\n          data: skillValues,\n          backgroundColor: backgroundColors,\n          borderColor: backgroundColors.map(color => color.replace('0.8', '1')),\n          borderWidth: 1,\n        }\n      ],\n    });\n  }, [membersData, membersLoading]);\n\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n    },\n  };\n\n  if (membersLoading) {\n    return <div>Loading...</div>;\n  }\n\n  if (!membersData || !membersData.data) {\n    return <div>No data available</div>;\n  }\n\n  return (\n    <TitleCard title={\"Skill Sets by Category\"}>\n      {chartData && <Doughnut options={options} data={chartData} />}\n    </TitleCard>\n  );\n}\n\nexport default SkillsChart;\n","import {\n    Chart as ChartJS,\n    Filler,\n    ArcElement,\n    Tooltip,\n    Legend,\n  } from 'chart.js';\n  import { Scatter } from 'react-chartjs-2';\n  import TitleCard from '../../../components/Cards/TitleCard';\n  \n  ChartJS.register(ArcElement, Tooltip, Legend,\n      Tooltip,\n      Filler,\n      Legend);\n  \n  function ScatterChart(){\n  \n      const options = {\n            scales: {\n                y: {\n                    beginAtZero: true,\n                },\n            },\n        };\n        \n        const data = {\n          datasets: [\n            {\n              label: 'Orders > 1k',\n              data: Array.from({ length: 100 }, () => ({\n                x: Math.random() * 11,\n                y: Math.random() * 31,\n              })),\n              backgroundColor: 'rgba(255, 99, 132, 1)',\n            },\n            {\n                label: 'Orders > 2K',\n                data: Array.from({ length: 100 }, () => ({\n                  x: Math.random() * 12,\n                  y: Math.random() * 12,\n                })),\n                backgroundColor: 'rgba(0, 0, 255, 1)',\n              },\n          ],\n        };\n  \n      return(\n          <TitleCard title={\"No of Orders by month (in k)\"}>\n                  <Scatter options={options} data={data} />\n          </TitleCard>\n      )\n  }\n  \n  \n  export default ScatterChart","import {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend,\n  } from 'chart.js';\n  import { Bar } from 'react-chartjs-2';\n  import TitleCard from '../../../components/Cards/TitleCard';\n  \n  ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\n  \n  function StackBarChart(){\n  \n      const options = {\n            responsive: true,\n            scales: {\n                x: {\n                    stacked: true,\n                },\n                y: {\n                    stacked: true,\n                },\n            },\n        };\n        \n        const labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July'];\n        \n        const data = {\n          labels,\n          datasets: [\n            {\n              label: 'Store 1',\n              data: labels.map(() => { return Math.random() * 1000 + 500 }),\n              backgroundColor: 'rgba(255, 99, 132, 1)',\n            },\n            {\n              label: 'Store 2',\n              data: labels.map(() => { return Math.random() * 1000 + 500 }),\n              backgroundColor: 'rgba(53, 162, 235, 1)',\n            },\n            {\n                label: 'Store 3',\n                data: labels.map(() => { return Math.random() * 1000 + 500 }),\n                backgroundColor: 'rgba(235, 162, 235, 1)',\n              },\n          ],\n        };\n  \n      return(\n        <TitleCard title={\"Sales\"} topMargin=\"mt-2\">\n              <Bar options={options} data={data} />\n        </TitleCard>\n  \n      )\n  }\n  \n  \n  export default StackBarChart","import React, { useState, useEffect } from \"react\";\nimport TitleCard from \"../../../components/Cards/TitleCard\";\nimport useStrapi from \"../../../hooks/useStrapi\";\n\nfunction SkillsChannels() {\n  const { data: membersData, loading: membersLoading } = useStrapi(\"user-saltos\", {});\n  const [skillCount, setSkillCount] = useState([]);\n\n  useEffect(() => {\n    if (membersLoading || !membersData || !membersData.data) return;\n\n    let skillMap = {};\n    membersData.data.forEach((user) => {\n      if (user && user.attributes && user.attributes.skills) {\n        user.attributes.skills.forEach((skill) => {\n          if (skill) {\n            skillMap[skill] = (skillMap[skill] || 0) + 1;\n          }\n        });\n      }\n    });\n\n    let sortedSkills = Object.entries(skillMap)\n      .map(([name, count]) => ({\n        name,\n        count,\n        percentage: ((count / membersData.data.length) * 100).toFixed(2),\n      }))\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 10); // 7位までに制限\n\n    setSkillCount(sortedSkills);\n  }, [membersData, membersLoading]);\n\n  if (membersLoading) {\n    return <div>Loading...</div>;\n  }\n\n  if (!membersData || !membersData.data) {\n    return <div>No data available</div>;\n  }\n\n  return (\n    <TitleCard title={\"Salto User Skill Sets\"}>\n      <div className=\"overflow-x-auto\">\n        <table className=\"table w-full\">\n          <thead>\n            <tr>\n              <th></th>\n              <th>Name</th>\n              <th>Count</th>\n              <th>Percentage</th>\n            </tr>\n          </thead>\n          <tbody>\n            {skillCount.map((skill, index) => (\n              <tr key={index}>\n                <td>{index + 1}</td>\n                <td>\n                  {skill.name.length > 15\n                    ? `${skill.name.substring(0, 15)}...`\n                    : skill.name}\n                </td>\n                <td>{skill.count}</td>\n                <td>{`${skill.percentage}%`}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </TitleCard>\n  );\n}\n\nexport default SkillsChannels;\n","import React, { useState, useEffect } from \"react\";\nimport TitleCard from \"../../../components/Cards/TitleCard\";\nimport useStrapi from \"../../../hooks/useStrapi\";\n\nfunction GoalsChannels() {\n  const { data: membersData, loading: membersLoading } = useStrapi(\"user-saltos\", {});\n  const [goalCount, setGoalCount] = useState([]);\n\n  useEffect(() => {\n    if (membersLoading || !membersData || !membersData.data) return;\n\n    let goalMap = {};\n    membersData.data.forEach(user => {\n      if (user && user.attributes && user.attributes.goals) {\n        user.attributes.goals.forEach(goal => {\n          if (goal) {\n            goalMap[goal] = (goalMap[goal] || 0) + 1;\n          }\n        });\n      }\n    });\n\n    let sortedGoals = Object.entries(goalMap)\n      .map(([name, count]) => ({\n        name, \n        count, \n        percentage: ((count / membersData.data.length) * 100).toFixed(2)\n      }))\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 10);  // 7位までに制限\n\n    setGoalCount(sortedGoals);\n  }, [membersData, membersLoading]);\n\n  if (membersLoading) {\n    return <div>Loading...</div>;\n  }\n\n  if (!membersData || !membersData.data) {\n    return <div>No data available</div>;\n  }\n\n  return (\n    <TitleCard title={\"Salto User Goals\"}>\n      <div className=\"overflow-x-auto\">\n        <table className=\"table w-full\">\n          <thead>\n            <tr>\n              <th></th>\n              <th>Name</th>\n              <th>Count</th>\n              <th>Percentage</th>\n            </tr>\n          </thead>\n          <tbody>\n            {goalCount.map((goal, index) => (\n              <tr key={index}>\n                <td>{index+1}</td>\n                <td>{goal.name.length > 15 ? `${goal.name.substring(0, 15)}...` : goal.name}</td>\n                <td>{goal.count}</td>\n                <td>{`${goal.percentage}%`}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </TitleCard>\n  );\n}\n\nexport default GoalsChannels;\n","function DashboardStats({title, icon, value, description, colorIndex}){\n\n    const COLORS = [\"primary\", \"primary\"]\n\n    const getDescStyle = () => {\n        if(description.includes(\"↗︎\"))return \"font-bold text-green-700 dark:text-green-300\"\n        else if(description.includes(\"↙\"))return \"font-bold text-rose-500 dark:text-red-400\"\n        else return \"\"\n    }\n\n    return(\n        <div className=\"stats shadow\">\n            <div className=\"stat\">\n                <div className={`stat-figure dark:text-slate-300 text-${COLORS[colorIndex%2]}`}>{icon}</div>\n                <div className=\"stat-title dark:text-slate-300\">{title}</div>\n                <div className={`stat-value dark:text-slate-300 text-${COLORS[colorIndex%2]}`}>{value}</div>\n                <div className={\"stat-desc  \" + getDescStyle()}>{description}</div>\n            </div>\n        </div>\n    )\n}\n\nexport default DashboardStats","import LineChart from \"./components/LineChart\";\nimport BarChart from \"./components/BarChart\";\nimport GoalsChart from \"./components/GoalsChart\";\nimport SkillsChart from \"./components/SkillsChart\";\nimport ScatterChart from \"./components/ScatterChart\";\nimport StackBarChart from \"./components/StackBarChart\";\nimport SkillsChannels from \"./components/SkillsChannels\";\nimport GoalsChannels from \"./components/GoalsChannels\";\n\nimport DashboardStats from \"./components/DashboardStats\";\n\nimport UserGroupIcon from \"@heroicons/react/24/outline/UserGroupIcon\";\nimport { useState ,useEffect } from \"react\";\nimport useStrapi from \"../../hooks/useStrapi\";\n\nfunction Charts() {\n\n  const [userCount, setUserCount] = useState(0); // ユーザー数を格納するステート\n\n  // useStrapi フックを使用して user-saltos データを取得\n  const { data: membersData, loading: membersLoading } = useStrapi(\"user-saltos\", {});\n\n  useEffect(() => {\n    if (membersLoading || !membersData || !membersData.data) return;\n    setUserCount(membersData.data.length); // ユーザー数をセット\n  }, [membersData, membersLoading]);\n\n  const statsData = [\n    {\n      title: \"Salto Users\",\n      value: `${userCount}`, // ユーザー数を動的に表示\n      icon: <UserGroupIcon className=\"w-8 h-8\" />,\n      description: \"\",\n    },\n  ];\n\n  \n\n  return (\n    <>\n      {/** ---------------------- Different charts ------------------------- */}\n\n      <div className=\"grid lg:grid-cols-4 mt-2 md:grid-cols-2 grid-cols-1 gap-6 \">\n        {statsData.map((d, k) => {\n          return <DashboardStats key={k} {...d} colorIndex={k} />;\n        })}\n      </div>\n\n      <div className=\"grid lg:grid-cols-2 mt-4 grid-cols-1 gap-6\">\n        <SkillsChart />\n        <GoalsChart />\n      </div>\n\n      <div className=\"grid lg:grid-cols-2 mt-4 grid-cols-1 gap-6\">\n        <SkillsChannels />\n        <GoalsChannels />\n      </div>\n      \n      {/* <h1 className=\"text-center mt-12\">↓↓↓↓↓Comming Soon↓↓↓↓↓</h1>\n      <div className=\"grid lg:grid-cols-2 mt-0 grid-cols-1 gap-6 mt-4\">\n        <StackBarChart />\n        <BarChart />\n      </div>\n\n      <div className=\"grid lg:grid-cols-2 mt-4 grid-cols-1 gap-6\">\n        <ScatterChart />\n        <LineChart />\n      </div> */}\n    </>\n  );\n}\n\nexport default Charts;\n","import { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport Charts from '../../features/charts'\nimport { setPageTitle } from '../../features/common/headerSlice'\n\nfunction InternalPage(){\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(setPageTitle({ title : \"Analytics\"}))\n      }, [])\n\n\n    return(\n        <Charts />\n    )\n}\n\nexport default InternalPage"],"names":["_ref","title","children","topMargin","TopSideButtons","_jsxs","className","Subtitle","styleClass","_jsx","concat","ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Filler","Legend","BarElement","ArcElement","data","membersData","loading","membersLoading","useStrapi","chartData","setChartData","useState","useEffect","goalMap","forEach","user","attributes","goals","goal","fixedColors","singleCountGoals","otherGoalsCount","count","Object","entries","push","sortedGoals","sort","a","b","goalLabels","map","item","goalValues","backgroundColors","label","index","length","minVal","r","Math","floor","random","g","generateRandomColor","labels","datasets","backgroundColor","borderColor","color","replace","borderWidth","TitleCard","Doughnut","options","responsive","plugins","legend","position","skillMap","skills","skill","singleCountskills","otherskillsCount","sortedskills","skillLabels","skillValues","skillCount","setSkillCount","sortedSkills","name","percentage","toFixed","slice","substring","goalCount","setGoalCount","icon","value","description","colorIndex","COLORS","includes","userCount","setUserCount","statsData","UserGroupIcon","_Fragment","d","k","DashboardStats","SkillsChart","GoalsChart","SkillsChannels","GoalsChannels","dispatch","useDispatch","setPageTitle","Charts"],"sourceRoot":""}